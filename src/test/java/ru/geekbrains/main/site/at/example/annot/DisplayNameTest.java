package ru.geekbrains.main.site.at.example.annot;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

@DisplayName("–¢–µ—Å—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä")
class DisplayNameTest {

    @Test
    @DisplayName("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –ø—Ä–æ–±–µ–ª—ã")
    void testWithDisplayNameContainingSpaces() {
    }

    @Test
    @DisplayName("‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØ")
    void testWithDisplayNameContainingSpecialCharacters() {
    }

    @Test
    @DisplayName("üò±")
    void testWithDisplayNameContainingEmoji() {
    }


    //-------------------–ü—Ä–∏–º–µ—Ä —Å –ø–µ—Ä–µ–¥–∞—á–µ–π 2—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–∑ –º–µ—Ç–æ–¥–∞
    @DisplayName("–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    @ParameterizedTest(name = "{index} ==> {0} –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ:{1}")
    @MethodSource("stringAndIntProvider")
    void testWithMultiArgMethodSource(String type, int count) {
        assertNotNull(type);
        assertNotEquals(0, count);
    }

    static Stream<Arguments> stringAndIntProvider() {
        return Stream.of(Arguments.of("–ö—É—Ä—Å–æ–≤", 150), Arguments.of("–í–µ–±–∏–Ω–∞—Ä–æ–≤", 290));
    }

}